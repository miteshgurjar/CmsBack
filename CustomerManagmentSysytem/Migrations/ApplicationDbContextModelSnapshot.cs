// <auto-generated />
using System;
using CustomerManagmentSysytem.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CustomerManagmentSysytem.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CustomerManagmentSysytem.Data.Mdoels.Customers", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BaseImage64");

                    b.Property<string>("CustomerEmail")
                        .IsRequired();

                    b.Property<string>("CustomerFullName")
                        .IsRequired()
                        .HasMaxLength(2147483647);

                    b.Property<string>("CustomerPassword");

                    b.Property<byte[]>("FileData");

                    b.Property<string>("FileName");

                    b.Property<int>("FileSize");

                    b.Property<int>("OwnerId");

                    b.Property<DateTime>("TimeOfUpload");

                    b.Property<string>("TypeOfCustomer");

                    b.Property<int?>("projectSpaceId");

                    b.Property<int?>("projectSpaceId1");

                    b.Property<byte[]>("token");

                    b.HasKey("CustomerId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("projectSpaceId");

                    b.HasIndex("projectSpaceId1");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("CustomerManagmentSysytem.Data.Mdoels.Owners", b =>
                {
                    b.Property<int>("OwnerId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("OwnerEmail")
                        .IsRequired();

                    b.Property<string>("OwnerFullName")
                        .IsRequired();

                    b.Property<string>("OwnerPassword")
                        .IsRequired();

                    b.HasKey("OwnerId");

                    b.ToTable("Owners");
                });

            modelBuilder.Entity("CustomerManagmentSysytem.Data.Models.Analytical", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FileName");

                    b.Property<byte[]>("Images");

                    b.Property<DateTime>("dateOfUpload");

                    b.HasKey("Id");

                    b.ToTable("analytical");
                });

            modelBuilder.Entity("CustomerManagmentSysytem.Data.Models.Customer_Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerId");

                    b.Property<int>("ServiceId");

                    b.Property<bool>("isActive");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Customer_Service");
                });

            modelBuilder.Entity("CustomerManagmentSysytem.Data.Models.projectSpace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BackendType")
                        .IsRequired();

                    b.Property<int>("CustomerID");

                    b.Property<DateTime>("EndDate");

                    b.Property<string>("FrontendType")
                        .IsRequired();

                    b.Property<int>("Level");

                    b.Property<string>("Stage");

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("typeOfUsage");

                    b.HasKey("Id");

                    b.HasIndex("CustomerID");

                    b.ToTable("projectSpaces");
                });

            modelBuilder.Entity("CustomerManagmentSysytem.Data.Models.ServiceTypes", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OwnerId");

                    b.Property<string>("ServiceName")
                        .IsRequired();

                    b.HasKey("ServiceId");

                    b.HasAlternateKey("ServiceName");

                    b.HasIndex("OwnerId");

                    b.ToTable("ServiceTypes");
                });

            modelBuilder.Entity("CustomerManagmentSysytem.Data.Mdoels.Customers", b =>
                {
                    b.HasOne("CustomerManagmentSysytem.Data.Mdoels.Owners", "owners")
                        .WithMany("Customers")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CustomerManagmentSysytem.Data.Models.projectSpace")
                        .WithMany("AllocatorCustomer")
                        .HasForeignKey("projectSpaceId");

                    b.HasOne("CustomerManagmentSysytem.Data.Models.projectSpace")
                        .WithMany("RegisterCustomer")
                        .HasForeignKey("projectSpaceId1");
                });

            modelBuilder.Entity("CustomerManagmentSysytem.Data.Models.Customer_Service", b =>
                {
                    b.HasOne("CustomerManagmentSysytem.Data.Mdoels.Customers", "Customers")
                        .WithMany("Customer_Service")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CustomerManagmentSysytem.Data.Models.ServiceTypes", "ServiceTypes")
                        .WithMany("Customer_Service")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CustomerManagmentSysytem.Data.Models.projectSpace", b =>
                {
                    b.HasOne("CustomerManagmentSysytem.Data.Mdoels.Customers", "customers")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CustomerManagmentSysytem.Data.Models.ServiceTypes", b =>
                {
                    b.HasOne("CustomerManagmentSysytem.Data.Mdoels.Owners", "Owners")
                        .WithMany("ServiceTypes")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
